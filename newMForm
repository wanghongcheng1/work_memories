<template>
  <section id="system_account">
    <section ref="tableRef">
      <el-form ref="queryRef" :inline="true" :model="queryForm" class="search_left" label-width="70px">
        <el-form-item label="" prop="attachmentUrl" style="width: 200px">
          <AutoComplete v-model="queryForm.attachmentId" :httpFunc="reqHttp" keyword="attachmentId"
            placeholder="请输入附件ID" isPage></AutoComplete>
        </el-form-item>
        <el-form-item label="附件类型" prop="attachmentType">
          <el-select v-model="queryForm.attachmentType" placeholder="类型" style="width: 100px">
            <el-option label="全部" value="L" />
            <el-option v-for="item in optionsAttachmentType" :key="item.value" :label="item.label"
              :value="item.value" />
          </el-select>
        </el-form-item>
        <el-form-item label="附件状态" prop="attachmentStatus">
          <el-select v-model="queryForm.attachmentStatus" placeholder="状态" style="width: 100px">
            <el-option label="全部" value="L" />
            <el-option label="启用" value="y" />
            <el-option label="禁用" value="n" />
          </el-select>
        </el-form-item>
        <el-form-item label="是否可见" prop="isView">
          <el-select v-model="queryForm.isView" placeholder="是否可见" style="width: 100px">
            <el-option label="全部" value="L" />
            <el-option label="可见" value="y" />
            <el-option label="不可见" value="n" />
          </el-select>
        </el-form-item>

        <el-form-item>
          <el-button type="primary" @click="fetchData({ page: currentPage, size: pageSize, ...queryForm })"
            :loading="isLoading">
            <el-icon style="margin: 0 5px 0 0">
              <Search />
            </el-icon>
            查询
          </el-button>
          <el-button type="primary" @click="resetButton" plain>
            <el-icon style="margin: 0 5px 0 0">
              <Refresh />
            </el-icon>
            重置
          </el-button>
          <el-button type="success" @click="handleAddButton">
            <el-icon style="margin: 0 5px 0 0">
              <Plus />
            </el-icon>
            新增
          </el-button>
        </el-form-item>
      </el-form>
    </section>
    <section class="account-table">
      <mTable :options="options" :data="tableData" :tableHeight="count(tableRef).toString()" :isLoading="isLoading"
        isEditRow pagination stripe border :total="total" :currentPage="currentPage" :pageSize="pageSize"
        @size-change="handleSizeChange" @current-change="handleCurrentChange">
        <template #nameIdInfo="{ scope }">
          <p>
            <el-link class="like-a" type="primary" @click="handleTableEdit(scope)">
              {{ scope.row.attachmentId }}
            </el-link>
            <copy :content="scope.row.attachmentId" />
          </p>
        </template>
        <template #isVisible="{ scope }">
          <!-- {{ row.sketchStatus }} -->
          <template v-if="scope.row.isView == 'n'">
            <el-tag type="info">关闭</el-tag>
          </template>
          <template v-else>
            <el-tag type="success">启用</el-tag>
          </template>
        </template>
        <template #isSwitch="{ scope }">
          <span style="margin-right: 10px">
            {{ scope.row.attachmentStatus === 'y' ? '启用' : '关闭' }}
          </span>
          <el-switch v-model="scope.row.attachmentStatus" :active-value="'y'" :inactive-value="'n'"
            :before-change="() => statusChanged(scope.row)"
            style="--el-switch-on-color: #13ce66; --el-switch-off-color: #ff4949"></el-switch>
        </template>
      </mTable>
    </section>
    <!-- 新增/编辑 账号弹出框 -->
    <mDialog v-if="dialogVisible" :visible.sync="dialogVisible" :title="dialogTitle" :formData="lineFormData || {}"
      :formOptions="dialogOptions" :rules="rules" :mode="formMode" @submit="handleSubmit"
      @update:visible="(val) => (dialogVisible = val)" width="800" top="5vh"></mDialog>
  </section>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { reqHttp, addHttp, delHttp, editHttp } from '@/api/bss/attachmentManagement/index'
import type {
  TableData,
  AddRequest,
  EditRequest,
  GetRequest
} from '@/api/bss/attachmentManagement/types'
import { TableOptions } from '@/components/mTable/src/types'
import { FormOptions } from '@/components/mDialogForm/src/types'

import mTable from '@/components/mTable/src/index.vue'
import mDialog from '@/components/mDialogForm/src/index.vue'

import { optionsAttachmentType } from '@/const/options'

const tableRef = ref(null)
const queryRef = ref()

import count from '@/utils/tableHeight'
import i18n from '@/locales'
const { t } = i18n.global as any

const tableData = ref<TableData[]>([])
const currentPage = ref(1)
const pageSize = ref(15)
const total = ref<number>(0)

const initForm = {
  sortName: 'create_time',
  sortOrder: 'DESC',
  attachmentId: '',
  attachmentType: 'L',
  attachmentStatus: 'L',
  isView: 'L',
  attachmentUrl: ''
}

const queryForm = ref(initForm)

const addInitData = ref<AddRequest>({
  attachmentId: '', // 附件ID
  forumPostId: undefined, // forum_post_id
  attachmentType: undefined, // 附件类型;p,图片;f,文件;a,APK;e,EXE;v,视频;s,声频;m,音乐;
  createTime: undefined, // 创建时间，格式: yyyy-MM-dd HH:mm:ss
  attachmentStatus: undefined, // 附件状态
  isView: 'y', // 是否可见
  prefixPostfixFlag: 'h', // 前缀后缀标记;h,在前面(head);t,在尾部(tail)
  attachmentUrl: undefined // 附件URL
})

const editFormData = ref<EditRequest>()

//add 新增 edit 编辑
const formMode = ref<string>('add')
const lineFormData = ref(formMode.value === 'add' ? addInitData : editFormData)
const dialogTitle = ref<string>(formMode.value === 'add' ? '新增附件' : '编辑附件')

//Table需要的数据
const options: TableOptions[] = [
  {
    prop: 'attachmentId',
    label: '附件ID',
    slot: 'nameIdInfo'
  },
  {
    prop: 'forumPostId',
    label: '论坛帖子编号'
  },
  {
    prop: 'attachmentType',
    label: '附件类型',
    json: {
      sourceName: 'attachmentType',
      keyName: 'attachmentType'
    }
  },
  {
    prop: 'createTime',
    label: '创建时间',
    dateName: 'createTime',
    width: 180
  },
  {
    prop: 'attachmentStatus',
    label: '附件状态',
    slot: 'isSwitch'
  },
  {
    prop: 'isView',
    label: '是否可见',
    slot: 'isVisible'
  },
  {
    prop: 'prefixPostfixFlag',
    label: '标记',
    json: {
      sourceName: 'prefixPostfixType',
      keyName: 'prefixPostfixFlag'
    }
  },
  {
    prop: 'attachmentUrl',
    label: '附件URL',
    width: 220,
    showOmission: true
  }
]

//编辑和新增时候需要的数据
const dialogOptions: FormOptions[] = [
  {
    prop: 'attachmentId',
    label: '附件ID',
    type: 'text',
    mode: 'edit'
  },
  {
    prop: 'forumPostId',
    label: '论坛帖子编号',
    type: 'input'
  },
  {
    prop: 'attachmentType',
    label: '附件类型',
    type: 'select',
    selectData: {
      selectName: 'attachmentType',
      placeholder: '请选择附件类型'
    }
  },
  {
    prop: 'createTime',
    label: '创建时间',
    type: 'date',
    dateData: {
      placeholder: '请选择创建时间'
    }
  },
  {
    prop: 'attachmentStatus',
    label: '附件状态',
    type: 'radio',
    radioData: {
      radioName: 'isOpen'
    }
  },
  {
    prop: 'isView',
    label: '是否可见',
    type: 'radio',
    radioData: {
      radioName: 'isSee'
    }
  },
  {
    prop: 'prefixPostfixFlag',
    label: '标记',
    type: 'radio',
    radioData: {
      radioName: 'prefixPostfix'
    }
  },
  {
    prop: 'attachmentUrl',
    label: '附件URL',
    type: 'input'
  }
]
//编辑弹窗
// const editDialogVisible = ref(false)
const dialogVisible = ref(false)

//loading 按钮
const isLoading = ref(false)

//新增的时候的
const rulesAdd = ref({
  attachmentId: [{ required: true, message: '附件ID不能为空', trigger: 'blur' }],
  custom1: [{ required: true, message: '自定义项1不能为空', trigger: 'blur' }]
})
//编辑的时候的
const rulesEdit = ref({
  attachmentId: [{ required: true, message: '附件ID不能为空', trigger: 'blur' }],
  custom1: [{ required: true, message: '自定义项1不能为空', trigger: 'blur' }]
})

const rules = ref(formMode.value === 'add' ? rulesAdd : rulesEdit)

//翻页功能 前一页
const handleSizeChange = (val: number) => {
  pageSize.value = val
  fetchData()
}
//翻页功能 后一页
const handleCurrentChange = (val: number) => {
  currentPage.value = val
  fetchData()
}

const handleSubmit = async (row: AddRequest | EditRequest) => {
  const params = row
  // console.log(row)
  // return
  try {
    const response =
      formMode.value === 'add'
        ? await addHttp(params as AddRequest)
        : await editHttp(params as EditRequest)

    if (response.success) {
      fetchData() // 保存成功后重新获取数据
      dialogVisible.value = false
    } else {
      ElMessage({
        showClose: true,
        message: response.errMessage,
        type: 'error'
      })
    }
  } catch (error) {
    console.error('Error saving data:', error)
  }
}

/**
 * 状态变化处理函数，返回一个Promise以满足before-change的要求
 * @param {Object} row - 当前行数据
 * @returns {Promise}
 */
const statusChanged = (row) => {
  return new Promise((resolve, reject) => {
    if (row.attachmentStatus === 'n') {
      updateStatus(row).then(resolve).catch(reject)
    } else {
      ElMessageBox.confirm(t('pop.areyousurepage'), t('pop.warn'), {
        confirmButtonText: t('button.determine'),
        cancelButtonClass: t('button.cancel'),
        type: 'warning'
      })
        .then(() => {
          updateStatus(row).then(resolve).catch(reject)
        })
        .catch(() => {
          reject(new Error('用户取消操作'))
        })
    }
  })
}

/**
 * 更新状态函数，执行异步请求
 * @param {Object} row - 当前行数据
 * @returns {Promise}
 */
const updateStatus = async (row) => {
  const newStatus = row.attachmentStatus === 'y' ? 'n' : 'y'
  const { attachmentId } = row
  try {
    const response = await editHttp({ attachmentId, attachmentStatus: newStatus })
    if (response.success) {
      ElMessage({
        message: '修改成功',
        type: 'success'
      })
      row.attachmentStatus = newStatus
      return Promise.resolve()
    } else {
      ElMessage({
        showClose: true,
        message: response.errMessage,
        type: 'error'
      })
      return Promise.reject(new Error(response.errMessage))
    }
  } catch (error) {
    console.error('Error saving data:', error)
    ElMessage({
      showClose: true,
      message: '保存数据时出错',
      type: 'error'
    })
    return Promise.reject(error)
  }
}

//弹窗编辑按钮点击
const handleTableEdit = (scope: any) => {
  formMode.value = 'edit'
  lineFormData.value = scope.row
  dialogVisible.value = true
}

//弹窗编辑按钮点击
const handleAddButton = () => {
  // console.log(row)
  dialogVisible.value = true
  formMode.value = 'add'
}

//页面初始化获取数据
const fetchData = async (queryForm?: GetRequest) => {
  let params = {
    page: currentPage.value,
    size: pageSize.value
  }
  params = queryForm ? { ...params, ...queryForm } : params
  isLoading.value = true
  try {
    const response = await reqHttp(params)
    if (response.success) {
      tableData.value = response.data.list
      total.value = Number(response.data.total)
    } else {
      tableData.value = []
      total.value = 0
      ElMessage({
        showClose: true,
        message: response.errMessage,
        type: 'error'
      })
    }
  } catch (error) {
    console.error('Error fetching data:', error)
  } finally {
    isLoading.value = false
  }
}

//删除一条数据
const handleDelete = async (attachmentId: string) => {
  // Handle delete logic here (e.g., confirm delete action)
  // return
  try {
    const response = await delHttp({ attachmentId })
    // console.log(data)
    if (response.success) {
      fetchData() // 保存成功后重新获取数据
    } else {
      ElMessage({
        showClose: true,
        message: response.errMessage,
        type: 'error'
      })
    }
  } catch (error) {
    console.error('Error saving data:', error)
  }
}

//新增数据 或者编辑数据
const handleEditSubmit = async (formData: any) => {
  const params = formData
  // return
  try {
    const response = await editHttp(params)
    if (response.success) {
      fetchData() // 保存成功后重新获取数据
      dialogVisible.value = false // 关闭对话框
    } else {
      ElMessage({
        showClose: true,
        message: response.errMessage,
        type: 'error'
      })
    }
  } catch (error) {
    console.error('Error saving data:', error)
  }
}

const resetButton = () => {
  queryRef.value.resetFields()
  fetchData()
}

//页面初始化加载
onMounted(fetchData)
</script>

<style scoped lang="less"></style>
